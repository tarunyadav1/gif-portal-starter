{"version":3,"sources":["assets/twitter-logo.svg","App.js","index.js"],"names":["SystemProgram","web3","arr","Object","values","kp","_keypair","secretKey","secret","Uint8Array","baseAccount","Keypair","fromSecretKey","programID","PublicKey","idl","metadata","address","network","clusterApiUrl","opts","TWITTER_HANDLE","TWITTER_LINK","TEST_GIFS","App","useState","walletAddress","setWalletAddress","inputValue","setInputValue","gifList","setGifList","connectWallet","a","window","solana","connect","response","console","log","publicKey","toString","onInputChange","event","value","target","getProvider","connection","Connection","Provider","sendGif","length","provider","program","Program","rpc","addGif","accounts","user","wallet","getGifList","createGifAccount","startStuffOff","systemProgram","programId","signers","checkIfWalletIsConnected","isPhantom","onlyIfTrusted","alert","error","useCallback","account","fetch","useEffect","onLoad","addEventListener","removeEventListener","className","onClick","onSubmit","preventDefault","type","placeholder","onChange","map","item","index","src","gifLink","alt","twitterLogo","href","rel","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.6599e5ba.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/twitter-logo.d89d9a86.svg\";","import React, { useEffect, useState,useCallback } from 'react';\nimport twitterLogo from './assets/twitter-logo.svg';\nimport './App.css';\nimport { Connection, PublicKey, clusterApiUrl} from '@solana/web3.js';\nimport {\n  Program, Provider, web3\n} from '@project-serum/anchor';\n\nimport idl from './idl.json';\nimport kp from './keypair.json'\n\n// SystemProgram is a reference to the Solana runtime!\nconst { SystemProgram } = web3;\n\n// Create a keypair for the account that will hold the GIF data.\nconst arr = Object.values(kp._keypair.secretKey)\nconst secret = new Uint8Array(arr)\nconst baseAccount = web3.Keypair.fromSecretKey(secret)\n\n// Get our program's id from the IDL file.\nconst programID = new PublicKey(idl.metadata.address);\n\n// Set our network to devnet.\nconst network = clusterApiUrl('devnet');\n\n// Controls how we want to acknowledge when a transaction is \"done\".\nconst opts = {\n  preflightCommitment: \"processed\"\n}\n\n// Constants\nconst TWITTER_HANDLE = '_buildspace';\nconst TWITTER_LINK = `https://twitter.com/${TWITTER_HANDLE}`;\n\nconst TEST_GIFS = [\n  'https://i.giphy.com/media/eIG0HfouRQJQr1wBzz/giphy.webp',\n  'https://media2.giphy.com/media/idvJc5QZl1WfV6ktp4/giphy.gif',\n  'https://media3.giphy.com/media/IgpAALi5hEv1IFmCrZ/giphy.gif?cid=790b76117b62a4a2450d0a43d5d6675d7a295447cb12bb41&rid=giphy.gif&ct=g',\n  'https://media3.giphy.com/media/cODrlNTkGnZGVtVagd/giphy.gif?cid=ecf05e47h2sfa3o65qysxjc4f40svv06b4bxkbbpvrsc0gkw&rid=giphy.gif&ct=g'\n]\n\nconst App = () => {\n  const [walletAddress, setWalletAddress] = useState(null)\n  const [inputValue, setInputValue] = useState('')\n  const [gifList, setGifList] = useState([]);\n\n  const connectWallet = async () => {\n\n    const { solana } = window;\n\n    if (solana) {\n      const response = await solana.connect();\n      console.log('Connected with Public Key:', response.publicKey.toString());\n      setWalletAddress(response.publicKey.toString());\n    }\n  };\n\n  const renderNotConnectedContainer = () => (\n    <button\n      className=\"cta-button connect-wallet-button\"\n      onClick={connectWallet}\n    >\n      Connect to Wallet\n    </button>\n  );\n\n  const onInputChange = (event) => {\n    const { value } = event.target;\n    setInputValue(value);\n  };\n\n  const getProvider = () => {\n  const connection = new Connection(network, opts.preflightCommitment);\n  const provider = new Provider(\n    connection, window.solana, opts.preflightCommitment,\n  );\n\treturn provider;\n}\n\nconst sendGif = async () => {\n  if (inputValue.length === 0) {\n    console.log(\"No gif link given!\")\n    return\n  }\n  setInputValue('');\n  console.log('Gif link:', inputValue);\n  try {\n    const provider = getProvider();\n    const program = new Program(idl, programID, provider);\n\n    await program.rpc.addGif(inputValue, {\n      accounts: {\n        baseAccount: baseAccount.publicKey,\n        user: provider.wallet.publicKey,\n      },\n    });\n    console.log(\"GIF successfully sent to program\", inputValue)\n\n    await getGifList();\n  } catch (error) {\n    console.log(\"Error sending GIF:\", error)\n  }\n};\n\n  const createGifAccount = async () => {\n  try {\n    const provider = getProvider();\n    const program = new Program(idl, programID, provider);\n    console.log(\"ping\")\n    await program.rpc.startStuffOff({\n      accounts: {\n        baseAccount: baseAccount.publicKey,\n        user: provider.wallet.publicKey,\n        systemProgram: SystemProgram.programId,\n      },\n      signers: [baseAccount]\n    });\n    console.log(\"Created a new BaseAccount w/ address:\", baseAccount.publicKey.toString())\n    await getGifList();\n\n  } catch(error) {\n    console.log(\"Error creating BaseAccount account:\", error)\n  }\n}\n\nconst renderConnectedContainer = () => {\n\t// If we hit this, it means the program account hasn't be initialized.\n  if (gifList === null) {\n    return (\n      <div className=\"connected-container\">\n        <button className=\"cta-button submit-gif-button\" onClick={createGifAccount}>\n          Do One-Time Initialization For GIF Program Account\n        </button>\n      </div>\n    )\n  } \n\t// Otherwise, we're good! Account exists. User can submit GIFs.\n\telse {\n    return(\n      <div className=\"connected-container\">\n        <form\n          onSubmit={(event) => {\n            event.preventDefault();\n            sendGif();\n          }}\n        >\n          <input\n            type=\"text\"\n            placeholder=\"Enter gif link!\"\n            value={inputValue}\n            onChange={onInputChange}\n          />\n          <button type=\"submit\" className=\"cta-button submit-gif-button\">\n            Submit\n          </button>\n        </form>\n        <div className=\"gif-grid\">\n\t\t\t\t\t{/* We use index as the key instead, also, the src is now item.gifLink */}\n          {gifList.map((item, index) => (\n            <div className=\"gif-item\" key={index}>\n              <img src={item.gifLink} alt='gif' />\n            </div>\n          ))}\n        </div>\n      </div>\n    )\n  }\n}\n\n  const checkIfWalletIsConnected = async () => {\n    try {\n\n      const { solana } = window\n      if (solana) {\n        if (solana.isPhantom) {\n          console.log(\"Phantom wallet is found\")\n\n          const response = await solana.connect({ onlyIfTrusted: true });\n\n          console.log(\n            'Connected with Public Key:',\n            response.publicKey.toString()\n          );\n\n          setWalletAddress(response.publicKey.toString())\n        }\n\n      } else {\n        alert('Solana object not found! Get a Phantom Wallet 👻');\n      }\n    } catch (error) {\n      console.error(error);\n    }\n  }\n\n  const getGifList = useCallback(async() => {\n  try {\n    const provider = getProvider();\n    const program = new Program(idl, programID, provider);\n    const account = await program.account.baseAccount.fetch(baseAccount.publicKey);\n    \n    console.log(\"Got the account\", account)\n    setGifList(account.gifList)\n\n  } catch (error) {\n    console.log(\"Error in getGifList: \", error)\n    setGifList(null);\n  }\n},[])\n\n\n  useEffect(() => {\n    const onLoad = async () => {\n      await checkIfWalletIsConnected();\n    }\n\n    window.addEventListener('load', onLoad);\n    return () => window.removeEventListener('load', onLoad);\n\n  }, [])\n\n\n  useEffect(() => {\n    if (walletAddress) {\n      console.log('Fetching GIF list...');\n    getGifList()\n      // Call Solana program here.\n\n      // Set state\n      setGifList(TEST_GIFS);\n    }\n  }, [walletAddress, getGifList]);\n\n  return (\n    <div className=\"App\">\n      <div className={walletAddress ? 'authed-container' : 'container'}>\n        <div className=\"header-container\">\n          <p className=\"header\">🖼Rick and Morty's  GIF Portal</p>\n          <p className=\"sub-text\">\n            View Rick and Morty GIF collection in the metaverse ✨\n          </p>\n          {!walletAddress ?\n            renderNotConnectedContainer() : renderConnectedContainer()\n          }\n        </div>\n        <div className=\"footer-container\">\n          <img alt=\"Twitter Logo\" className=\"twitter-logo\" src={twitterLogo} />\n          <a\n            className=\"footer-text\"\n            href={TWITTER_LINK}\n            target=\"_blank\"\n            rel=\"noreferrer\"\n          >{`built on @${TWITTER_HANDLE}`}</a>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}